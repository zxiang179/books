package tianjin.geektime.design.pattern;

/**
 * Created by tianjin on 2021/1/2.
 * 功能开发的基本步骤。
     * 如何做需求分析？
     * 如何做职责划分？
     * 需要定义哪些类？
     * 每个类应该具有哪些属性、方法？
     * 类与类之间该如何交互？
     * 如何组装成一个可执行的程序？
 * 如何进行面向对象需求？
     * 产出是需求描述
 * 以鉴权为例，我们该如何做需求分析？
     * 1. 第一轮基础分析，调用方每次进行接口请求的时候，都携带自己的AppId和密码，
     * 服务端在接收到请求之后，会解析AppId和密码，跟存储在服务端的AppID和密码进行比对。
     * 2. 第二轮分析优化，调用方将请求接口的URL和AppID、密码拼接在一起，然后加密，生成一个token，
     * 调用放在进行接口请求的时候，将这个token和AppID,随URL一块传递给服务端。
     * 3. 第三轮分析优化，服务端在接收到这些数据之后，会验证当前时间戳和传递过来的时间戳是否在一定的时间窗口
     * 内，比如一分钟，如果超过一分钟则判定token过期，拒绝接口请求。如果没有超过，则说明token没有过期，服务端通过相同token
     * 生成算法，在服务端生成新的token，与传递过来的token比对，看是否一致。
     * 4. 第四轮分析，开发鉴权这样的非业务功能，最好不要与具体的第三方系统有过度的耦合，针对密码的存储，需要有扩展点。
 * 5. 最终确定需求
     * 调用方进行接口请求的时候，将URL、AppID、密码、时间戳拼接在一起，通过加密算法生成token，并将token、AppID、时间戳
     * 拼接在URL中，一并发送到服务端。
     * 服务端在接收到调用方的接口请求之后，从轻求中拆接触token、AppID、时间戳。
     * 服务端首先检查传递过来的时间戳跟当前时间，是否在token时效时间窗内，如果已经超过失效时间，
     * 就算接口调用鉴权失败，拒绝接口调用请求。
     * 如果token验证没有过期时效，服务端再从存储中去除AppID对应的密码，通过同样会的token生成算法，生成另一个token,
     * 与调用方传递过来的token进行匹配；如果一致，则鉴权成功，允许接口调用，否则拒绝接口调用。
 */
public class Article_13 {



}
