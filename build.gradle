//import java.util.regex.Pattern

ext {
    caffeineVersion = '2.6.2'
    catVersion = '2.3.13.RELEASE'
    commonsLangVersion = '3.8.1'
    commonsPoolVersion = '2.6.2'
    commonsCollectionsVersion = "3.2.2"
    httpClientVersion = '4.5.6'
    httpAsyncClientVersion = '4.1.4'
    grpcVersion = '1.28.0'
    guavaVersion = '23.0'
    guiceVersion = '4.2.2'
    jacksonVersion = '2.9.9'
    junitVersion = '4.12'
    lombokVersion = '1.16.16'
    metricsVersion = '4.1.0'
    nettyVersion = '4.1.16.Final'
    powermockVersion = '2.0.0'
    protobufVersion = '3.6.1'
    slf4jVersion = '1.7.22'
    mockitoVersion = '2.0.111-beta'
    servletVersion = '3.1.0'
    javaxValidatorVersion = '1.0.0.GA'
    hibernateValidatorVersion = '4.2.0.Final'

    env = System.getProperty("env") == null ? "development" : System.getProperty("env")

}

buildscript {
    ext {
        springBootVersion = '1.5.6.RELEASE'
        protobufPluginVersion = '0.8.7'
    }

    repositories {
        maven {
            url = 'http://maven.aliyun.com/nexus/content/groups/public/'
            url = 'http://maven.aliyun.com/nexus/content/repositories/jcenter'
        }
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath "com.google.protobuf:protobuf-gradle-plugin:${protobufPluginVersion}"
        classpath("org.projectlombok:lombok:1.18.12")
        classpath("junit:junit:4.12")
    }
}

subprojects {
    apply plugin: 'base'
    apply plugin: 'checkstyle'
//    apply plugin: 'findbugs'
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: "jacoco"
    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    dependencies {
        // testCompile
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.powermock:powermock-api-mockito2:${powermockVersion}"
        testCompile "org.powermock:powermock-module-junit4:${powermockVersion}"
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
    }

    jacoco {
        toolVersion = "0.7.9"
//        reportsDir = file("$buildDir/customJacocoReportDir")
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.enabled true
//            html.destination "${buildDir}/jacocoHtml"
        }
    }

    configurations {
        all*.exclude group: "org.slf4j", module: "slf4j-log4j12"
        all*.exclude group: "org.slf4j", module: "log4j-over-slf4j"
    }

    configurations.all {
        // check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    test {
        jvmArgs "-Dfile.encoding=UTF-8"
    }

    checkstyle {
        toolVersion = "7.6"
        configFile = file("${project.rootDir}/checkstyle/pdd-java.xml")
    }

}

allprojects {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
    }
}


project(":J8Action") {
    apply plugin: 'com.google.protobuf'
    apply plugin: 'com.github.johnrengelman.shadow'

    group 'org.study.books'

    protobuf {
        generatedFilesBaseDir = "$projectDir/src"

        protoc {
            artifact = "com.google.protobuf:protoc:$protobufVersion"
        }

        plugins {
            grpc {
                artifact = 'io.grpc:protoc-gen-grpc-java:1.21.0'
            }
        }

        generateProtoTasks {
            all()*.plugins {
                grpc {
                    outputSubDir = 'java'
                }
            }
        }
    }

    sourceSets {
        main {

            java {
                srcDir 'src/main/java'
            }

            resources {
                srcDirs = ["src/main/resources"]
            }
        }
    }

}


project(":design-pattern") {
    apply plugin: 'com.google.protobuf'
    apply plugin: 'com.github.johnrengelman.shadow'

    group 'org.study.books'

    protobuf {
        generatedFilesBaseDir = "$projectDir/src"

        protoc {
            artifact = "com.google.protobuf:protoc:$protobufVersion"
        }

        plugins {
            grpc {
                artifact = 'io.grpc:protoc-gen-grpc-java:1.21.0'
            }
        }

        generateProtoTasks {
            all()*.plugins {
                grpc {
                    outputSubDir = 'java'
                }
            }
        }
    }

    sourceSets {
        main {

            java {
                srcDir 'src/main/java'
            }

            resources {
                srcDirs = ["src/main/resources"]
            }
        }
    }

    dependencies {
        compile("org.projectlombok:lombok:1.18.12")
        compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
        compile("junit:junit:4.12")
    }
}

project(":practice") {

    group 'org.study.books'

    sourceSets {
        main {

            java {
                srcDir 'src/main/java'
            }

            resources {
                srcDirs = ["src/main/resources"]
            }
        }
    }

    dependencies {
        compile("org.projectlombok:lombok:1.18.12")
        compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
        compile("junit:junit:4.12")
        compile("org.apache.poi:poi:3.17")
        compile("org.apache.poi:poi-ooxml:3.17")
        compile("com.fasterxml.jackson.core:jackson-annotations:2.2.2")
        compile("com.fasterxml.jackson.core:jackson-core:2.2.2")
        compile("com.fasterxml.jackson.core:jackson-databind:2.2.2")
        compile("org.apache.commons:commons-lang3:3.4")
        compile("org.apache.httpcomponents:httpclient:4.5.2")
        compile("com.alibaba:fastjson:1.2.62")
        compile("commons-io:commons-io:2.6")
        compile("com.google.guava:guava:20.0")
    }
}